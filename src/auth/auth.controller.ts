import { Request, Response } from 'express';import bcrypt from 'bcrypt';import jwt from 'jsonwebtoken';import validator from 'validator';import { uploadImage } from '../entities/image/image.controller';import { saveImage } from '../entities/image/image.service';import { authExceptionMessages } from './constant/authExceptionMessages';import { addUser, getUserByEmail } from '../entities/user/user.service';import { StatusCodes } from 'http-status-codes';export const loginHandler = async (req: Request, res: Response) => {  try {    const { email, password } = req.body;    if (!email || !password) {      throw new Error(authExceptionMessages.EMAIL_PASS_REQUIRED);    }    const user = await getUserByEmail(email);    const { username, id, phone, email: dbEmail } = user;    const passordMatched: boolean = await bcrypt.compare(      password,      user.password    );    if (!passordMatched) {      throw new Error(authExceptionMessages.INVALID_ID_CREDENTIALS);    }    const token = jwt.sign(      { id, username, phone, email: dbEmail },      process.env.JWT_TOKEN as string    );    res.status(StatusCodes.OK).json({ data: token });  } catch (error) {    res      .status(StatusCodes.INTERNAL_SERVER_ERROR)      .json({ msg: (error as Error).message });  }};export const registerHandler = async (req: Request, res: Response) => {  try {    const { username, email, password, role, phone } = req.body;    if (!username || !email || !password || !phone) {      throw new Error(authExceptionMessages.USER_CREDENTIALS);    }    if (!validator.isEmail(email)) {      throw new Error(authExceptionMessages.INVALID_EMAIL);    }    if (      !validator.isStrongPassword(password, {        minLength: 8,        minLowercase: 1,        minUppercase: 1,        minNumbers: 1,      })    ) {      throw new Error(authExceptionMessages.PASS_VALIDATION);    }    if (req.file) {      const imagePath = req.file!.path;      const imageUrl = await uploadImage(imagePath);      const imageName = req.file.filename;      const image = await saveImage(        { image_url: imageUrl, caption: imageName },        username      );      req.body.image_id = image.id;    } else {      req.body.image_id = null;    }    const savedUser = await addUser({      username,      email,      password,      phone,      role: role ? role : 'user',      image_id: req.body.image_id,      created_by: username,      updated_by: username,    });    res.json({ success: true, data: savedUser });  } catch (error: unknown) {    res      .status(StatusCodes.INTERNAL_SERVER_ERROR)      .json({ msg: (error as Error).message });  }};